5. Разработайте приложение с помощью фреймворка Qt, используя QWidgets.
Пирамида изображений - набор изображений, в котором каждое следующее изображение (слой
    пирамиды) получено путем уменьшения предыдущего в 2 раза.
Подробнее https://en.wikipedia.org/wiki/Pyramid_(image_processing)
Приложение представляет собой просмотрщик такой пирамиды. Предлагается разработать поэтапно
    несколько версий программы:
    1. Приложение позволяет выбрать файл изображения png или jpg из пункта меню и показывает его
        содержимое. Если размер изображения превышает размеры окна приложения, то должны
        появиться scrollbar-ы для перемещения по изображению.
    2. При загрузке изображения по нему строится пирамида изображений.
    3. Должна быть предусмотрена возможность произвольного переключения между слоями и
        оригинальным изображением с отображением номера слоя и его размера в пикселях. (т.е слои
        можно "листать", например с помощью combobox). При отображении каждый слой должен быть
        увеличен до размера оригинального изображения (таким образом содержимое его “замылится”).
    4. Реализовать открытие нескольких файлов с возможностью их переключения. Отобразить список
        открытых файлов с помощью комбобокса. Список отсортировать в порядке увеличения
        диагонали изображения.
    5. Снизить потребление памяти приложения
        (генерация слоя по требованию).
    6. Дополнительно: позволить пользователю
        задавать произвольный коэффициент
        уменьшения слоя (например, не 2, а 1.6).



Основная идея:
Widget - класс, наследник QWidget.
    QList<PyramidImage*> pyramidImages;//Список картинок

    bool CreatePyramidImages(int argc, char*[] argv);//Список названий файлов - картинок, что нужно загрузить. 
    //Если какой-нибудь файл не получится загрузить, то выдать ошибку и отменить весь прогресс.
    bool AddImage(QPixMap* image);
    bool RemoveImage(QPixMap* image);
    bool AddImageRange(QVector<QPixMap*>& images);
    bool Clear();

slots:
    void setCurrentIndexImage(int index);
    void setCurrentIndexLayer(int index);
    void setCoefficient(double coefficient);
signals:
    void labelSizeChanged(QString text);
    void labelImageChanged(QPixmap image);
    void comboBoxImageEnable(bool enable);

    QList<PyramidImage*> images;
    int currentIndexImage;
    int currentIndexLayer;
    static bool cmp(const QPixmap &a, const QPixmap &b);
    static QString labelSize(QSize& size);

PyramidImage - класс, который получает на вход картинку и создает набор изображений n/2, n/4 и т.д.
    String filename; 
    QVector<QPixMap*> images;//0-оригинальный, 1..m - уменьшенные копии. length == m+1
    float coefficient;//Коэффициент уменьшения слоя.


    void SetOriginalImage(QPixMap* original, String filename);
    String& GetFileName();
    void GenerateCopiedImages();
    int CountCopies();// return m
    QPixMap* GetImage(int i);//i - 0..m
    int GetWidthImage(int i);//i - 0..m
    int GetHeightImage(int i);//i - 0..m
    QSize* GetSize(int i);

    QPixMap* GenerateCopiedImageWithNoSave(int i);//i - 1..m
    void SetCoefficient(float coefficient);//coefficient>1
    float GetCoefficient();

    void clearGeneratedCopies();

    static int maxCopies(QSize* size);
    static double log(double x, double base);
    const float coefficient_default = 2.0f;

